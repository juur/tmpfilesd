#!/usr/bin/env bash

set -o errexit
#set -o pipefail
set -o nounset

show_help() 
{
	cat <<EOF
Usage: configure [OPTION]...

Configuration:
  -h, --help             print this message
      --target=TARGET    cross-compile target
  -q, --quiet, --silent  be quiet

Installation directories:
  --bindir=DIR
  --datadir=DIR
  --datarootdir=DIR
  --docdir=DIR
  --exec-prefix=DIR
  --includedir=DIR
  --infodir=DIR
  --libdir=DIR
  --libexecdir=DIR
  --localedir=DIR
  --localstatedir=DIR
  --mandir=DIR
  --prefix=DIR
  --sbindir=DIR
  --sharedstatedir=DIR
  --sysconfdir=DIR

Ignored for compatibility:
  --build=BUILD
  --host=HOST
  --program-prefix=PROGRAMPREFIX
  --disable-dependency-tracking
  --enable-dependency-tracking

EOF
}

QUIET=0
DEPS=1

while :; do
	case ${1:-} in
		-h|--help) show_help; exit ;;
		-q|--silent|--quiet) QUIET=1 ;;
		--bindir=?*) BINDIR=${1#*=} ;;
		--datadir=?*) DATADIR=${1#*=} ;;
		--datarootdir=?*) DATAROOTDIR=${1#*=} ;;
		--docdir=?*) DOCDIR=${1#*=} ;;
		--exec-prefix=?*) EXECPREFIX=${1#*=} ;;
		--includedir=?*) INCLUDEDIR=${1#*=} ;;
		--infodir=?*) INFODIR=${1#*=} ;;
		--libdir=?*) LIBDIR=${1#*=} ;;
		--libexecdir=?*) LIBEXECDIR=${1#*=} ;;
		--localedir=?*) LOCALEDIR=${1#*=} ;;
		--localstatedir=?*) LOCALSTATEDIR=${1#*=} ;;
		--mandir=?*) MANDIR=${1#*=} ;;
		--prefix=?*) PREFIX=${1#*=} ;;
		--sbindir=?*) SBINDIR=${1#*=} ;;
		--sharedstatedir=?*) SHAREDSTATEDIR=${1#*=} ;;
		--sysconfdir=?*) SYSCONFDIR=${1#*=} ;;
		--target=?*) TARGET=${1#*=} ;;
# These are added to keep RPM %configure error free		
		--build=?*) ;;
		--host=?*) ;;
		--program-prefix=?*) ;;
		--program-prefix=) ;;
		--disable-dependency-tracking) DEPS=0 ;;
		--enable-dependency-tracking) DEPS=1 ;;
		*) [ -n "${1-}" ] && { echo "Unknown argument ${1}" >&2; exit 1; } ;;
	esac
	shift 2>/dev/null || break
done

# log all of the scripts output to config.log
if [ ${QUIET} = 0 ]; then
	FIFO="/tmp/$$.pipe"
	mkfifo "${FIFO}"
	# shellcheck disable=SC2064
	trap "{ rm -f ${FIFO}; }" EXIT
	tee <"${FIFO}" &
	exec 1>"${FIFO}"
else
	exec 1>config.log
fi

OBJDIR=$(pwd)
SRCDIR=$(dirname "${0}")

if [ "$(realpath "${OBJDIR}")" = "$(realpath "${SRCDIR}")" ]; then
	echo "Building inside source directory."
fi

# Default file locations, or use env provided ones

PREFIX=${PREFIX:-/usr/local}
[ "${PREFIX}" = "/" ] &&  PREFIX=""
EXECPREFIX=${EXECPREFIX:-${PREFIX}}
DATAROOTDIR=${DATAROOTDIR:-${PREFIX}/share}
BINDIR=${BINDIR:-${EXECPREFIX}/bin}
DATADIR=${DATADIR:-${DATAROOTDIR}}
DOCDIR=${DOCDIR:-${DATAROOTDIR}/doc}
INCLUDEDIR=${INCLUDEDIR:-${PREFIX}/include}
INFODIR=${INFODIR:-${DATAROOTDIR}/info}
LIBDIR=${LIBDIR:-${PREFIX}/lib}
LIBEXECDIR=${LIBEXECDIR:-${EXECPREFIX}/libexec}
LOCALEDIR=${LOCALEDIR:-${DATAROOTDIR}/locale}
LOCALSTATEDIR=${LOCALSTATEDIR:-${PREFIX}/var}
MANDIR=${MANDIR:-${DATAROOTDIR}/man}
SBINDIR=${SBINDIR:-${EXECPREFIX}/sbin}
SHAREDSTATEDIR=${SHAREDSTATEDIR:-${PREFIX}/var/lib}
SYSCONFDIR=${SYSCONFDIR:-${PREFIX}/etc}
TARGET=${TARGET:-}
YACC=${YACC:-yacc}
LEX=${LEX:-lex}
LFLAGS=${LFLAGS:-}
YFLAGS=${YFLAGS:-}

[ -n "${TARGET}" ] && TOOL="${TARGET}-" || TOOL=""

# Default compiler flags

CFLAGS=${CFLAGS:--O2 -Wall -Wextra}
CPPFLAGS=${CPPFLAGS:-}
LDFLAGS=${LDFLAGS:-}
TARGET=${TARGET:-}

# Location of default tools

PKG_CONFIG=${PKG_CONFIG:-pkg-config}
CC=${CC:-${TOOL}cc}
CXX=${CXX:-${TOOL}c++}

# Predefined values, which should not be easily changed

PACKAGE=$(cat "${SRCDIR}/misc/PACKAGE")
VERSION=$(cat "${SRCDIR}/misc/VERSION")

# Support functions

fail()
{
	echo "${1}" >&2
	exit 1
}

# Check for a c compiler (mandatory)

printf "Checking for a C compiler ... "
echo "command:"
set -o xtrace
if env -i "PATH=$PATH" sh -c "command -v \"${CC}\""; then
	export CC
	env -i "PATH=$PATH" sh -c "command -v \"${CC}\""
else
	fail "Error: CC not valid"
fi

printf "Checking %s can produce executables ... " "$(basename "${CC}")"
printf '#include <stdlib.h>\nint main(void) {exit(0);}' | \
	if ${CC} -xc -o /dev/null - 2>>config.log; then
		echo "Ok"
	else
		{ echo "Fail"; exit 1; }
	fi

HOST_MACHINE=$(${CC} -dumpmachine)

printf "Configuring %s %s on %s" "${PACKAGE}" "${VERSION}" "${HOST_MACHINE}"
if [ -n "${TARGET}" ]; then
	echo " for target ${TARGET}" 
else
	echo ""
fi

echo "objdir = ${OBJDIR} / srcdir = ${SRCDIR}"

# List of system headers we need to check for

H_FILES="ctype.h dirent.h err.h errno.h fcntl.h getopt.h glob.h grp.h libgen.h limits.h pwd.h stdbool.h stdint.h stdio.h stdlib.h string.h sys/stat.h sys/time.h sys/types.h sys/utsname.h time.h unistd.h"

# List of system functions to check for function:arg0,arg1

FUNC_CHECK=""

# List of pkg-config things to check for

PKG_CHECK=""

# List of libraries to check for here

LIB_CHECK=""

# Application specific variables

# Check for pkg-config (mandatory)

printf "Checking for pkg-config ... "
if ! env -i "PATH=${PATH}" sh -c "command -v \"${PKG_CONFIG}\"" >/dev/null 2>&1; then
	fail "Error: PKG_CONFIG not valid"
fi

export PKG_CONFIG
which "${PKG_CONFIG}"

# Support functions

check_pkg() 
(
	printf "Checking for %s ... " "$1"
	"${PKG_CONFIG}" --exists "${1}"
	RT="$?"
	ok "${RT}"
	return "${RT}"
)

check_header()
(
	printf "Checking for %s ... " "$1"
	# shellcheck disable=SC2086
	echo "#include <${1}>" | \
		${CC} ${CFLAGS} ${CPPFLAGS} ${LDFLAGS} -E - -o /dev/null 2>>config.log
	RT="$?"
	ok "${RT}"
	return "${RT}"
)

check_lib()
(
	F="/tmp/$$.c"

	echo "#define _XOPEN_SOURCE 700" >${F}
	echo 'main(){}' >>${F}
	printf "Checking for -l%s ... " "$1"
	# shellcheck disable=SC2086
	${CC} ${LDFLAGS} ${CPPFLAGS} ${CFLAGS} "-l${1}" ${F} \
		-o /dev/null 2>>config.log
	RT="$?"
	ok "${RT}"
	rm -f "${F}"
	return "${RT}"
)

ok()
{
	if [ "$1" = 0 ]; then
		echo "ok"
	else 
		echo "not found"
	fi
}

check_func()
(
	F=/tmp/$$.c
	FUNC="$(echo "${1}" | cut -d: -f1)"
	ARGS="$(echo "${1}" | cut -d: -f2-)"

	echo "#define _GNU_SOURCE" >${F}
	for i in ${H_FILES} ; do
		echo "#include <${i}>" >>${F}
	done
	echo "void main() { ${FUNC}(${ARGS}); }" >>${F}
	printf "Checking for %s() ... " "${FUNC}"
	# shellcheck disable=SC2086
	${CC} ${LDFLAGS} ${CPPFLAGS} ${CFLAGS} ${F} -o /dev/null 2>>config.log
	RT="$?"

	ok "${RT}"
	rm -f "${F}"
	return "${RT}"
)

# start a new configuration file
if [ -e "${OBJDIR}/config.h" ]; then 
	mv -f "${OBJDIR}/config.h" "${OBJDIR}/config.h~"
fi
rm -f "${OBJDIR}/config.h"

# kludge any defines here

# set-up defines
echo "#define VERSION \"${VERSION}\"" >> "${OBJDIR}/config.h"

# package checks

for f in ${PKG_CHECK} ; do
	if check_pkg "${f}"; then
		CFLAGS="${CFLAGS} $(${PKG_CONFIG} --cflags "${f}")"
		LDFLAGS="${LDFLAGS} $(${PKG_CONFIG} --libs "${f}")"
	fi
done

# library checks

for f in ${LIB_CHECK} ; do
	if check_lib "${f}"; then LDFLAGS="${LDFLAGS} -l${f}" ; fi
done

# Perform checks for system headers and functions
# This is done here to ensure relevant libraries are linked etc.

for f in ${H_FILES} ; do
	def=$(echo "${f}" | sed "s#/#_#;s#\.#_#;s#/#_#;" | tr "[:lower:]" "[:upper:]")
    if check_header "${f}"; then 
		echo "#define HAVE_${def} 1" >> "${OBJDIR}/config.h"
	fi
done

for f in ${FUNC_CHECK}; do
	def=$(echo "${f}" | cut -d: -f1 | tr "[:lower:]" "[:upper:]")
	if check_func "${f}"; then 
		echo "#define HAVE_${def} 1" >> "${OBJDIR}/config.h"
	fi
done

# Append any *DIR variables to config.h here

# Create Makefile from template

echo "Writing Makefile"

ARGS=$(cat <<- __END
	s#@@DEPS@@#${DEPS}#;
	s#@@BINDIR@@#${BINDIR}#;
	s#@@DOCDIR@@#${DOCDIR}#;
	s#@@CC@@#${CC}#;
	s#@@CFLAGS@@#${CFLAGS}#;
	s#@@CPPFLAGS@@#${CPPFLAGS}#;
	s#@@CXX@@#${CXX}#;
	s#@@LFLAGS@@#${LFLAGS}#;
	s#@@YFLAGS@@#${YFLAGS}#;
	s#@@DATADIR@@#${DATADIR}#;
	s#@@DATAROOTDIR@@#${DATAROOTDIR}#;
	s#@@EXECPREFIX@@#${EXECPREFIX}#;
	s#@@INFODIR@@#${INFODIR}#;
	s#@@LDFLAGS@@#${LDFLAGS}#;
	s#@@LIBDIR@@#${LIBDIR}#;
	s#@@LIBEXECDIR@@#${LIBEXECDIR}#;
	s#@@LOCALEDIR@@#${LOCALEDIR}#;
	s#@@LOCALSTATEDIR@@#${LOCALSTATEDIR}#;
	s#@@MANDIR@@#${MANDIR}#;
    s#@@PREFIX@@#${PREFIX}#;
	s#@@OBJDIR@@#${OBJDIR}#;
	s#@@SBINDIR@@#${SBINDIR}#;
	s#@@SHAREDSTATEDIR@@#${SHAREDSTATEDIR}#;
	s#@@SRCDIR@@#${SRCDIR}#;
	s#@@SYSCONFDIR@@#${SYSCONFDIR}#;
	s#@@YACC@@#${YACC}#;
	s#@@LEX@@#${LEX}#;
__END
)

sed "${ARGS}" <"${SRCDIR}/Makefile.in" >"${OBJDIR}/Makefile"

echo "Please type make to continue"

exit 0
