#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset

# log all of the scripts output to config.log
exec &> >(tee -a config.log)

show_help() {
	cat <<EOF
	Usage: configure [options]
Configuration:
  --help                    print this message
  --target=TARGET           cross-compile target
Directory and file names:
  --prefix=DIR
  --exec-prefix=DIR
  --bindir=DIR
  --sbindir=DIR
  --libexecdir=DIR
  --sysconfdir=DIR
  --libdir=DIR
  --includedir=DIR
  --datarootdir=DIR
  --datadir=DIR
  --mandir=DIR
  --localstatedir=DIR
  --sharedstatedir=DIR

EOF
}

while :; do
	case ${1:-} in
		-h|--help) show_help; exit ;;
		--prefix=?*) PREFIX=${1#*=} ;;
		--exec-prefix=?*) EXECPREFIX=${1#*=} ;;
		--bindir=?*) BINDIR=${1#*=} ;;
		--sbindir=?*) SBINDIR=${1#*=} ;;
		--libexecdir=?*) LIBEXECDIR=${1#*=} ;;
		--sysconfdir=?*) SYSCONFDIR=${1#*=} ;;
		--libdir=?*) LIBDIR=${1#*=} ;;
		--includedir=?*) INCLUDEDIR=${1#*=} ;;
		--datarootdir=?*) DATAROOTDIR=${1#*=} ;;
		--datadir=?*) DATADIR=${1#*=} ;;
		--infodir=?*) INFODIR=${1#*=} ;;
		--mandir=?*) MANDIR=${1#*=} ;;
		--docdir=?*) DOCDIR=${1#*=} ;;
		--localstatedir=?*) LOCALSTATEDIR=${1#*=} ;;
		--sharedstatedir=?*) SHAREDSTATEDIR=${1#*=} ;;
		--target=?*) TARGET=${1#*=} ;;
#		--=?*) =${1#*=} ;;
		*) [ -n "${1-}" ] && echo "Unknown argument ${1}" >&2 ;;
	esac
	shift || break
done

OBJDIR=$(pwd)
SRCDIR=$(dirname ${0})

if [[ "$(realpath ${OBJDIR})" = "$(realpath ${SRCDIR})" ]]; then
	echo "Building inside source directory."
fi

# Default file locations, or use env provided ones

PREFIX=${PREFIX:-/usr/local}
EXECPREFIX=${EXECPREFIX:-\$(prefix)}
SYSCONFDIR=${SYSCONFDIR:-\$(prefix)/etc}
BINDIR=${BINDIR:-\$(exec_prefix)/bin}
INCLUDEDIR=${INCLUDEDIR:-\$(prefix)/include}
LIBDIR=${LIBDIR:-\$(prefix)/lib}
SBINDIR=${SBINDIR:-\$(exec_prefix)/sbin}
DATAROOTDIR=${DATAROOTDIR:-\$(prefix)/share}
DATADIR=${DATADIR:-\$(datarootdir)}
DOCDIR=${DOCDIR:-\$(datarootdir)/doc}
MANDIR=${MANDIR:-\$(datarootdir)/man}
INFODIR=${INFODIR:-\$(datarootdir)/info}
LIBEXECDIR=${LIBEXECDIR:-\$(exec_prefix)/libexec}
LOCALSTATEDIR=${LOCALSTATEDIR:-\$(prefix)/var}
SHAREDSTATEDIR=${SHAREDSTATEDIR:-\$(prefix)/var/lib}
TARGET=${TARGET:-}

if [ "${PREFIX}" = "/" ]; then PREFIX=""; fi

[ -n "${TARGET}" ] && TOOL="${TARGET}-" || TOOL=""

# Default compiler flags

CFLAGS=${CFLAGS:--O2}
CPPFLAGS=${CPPFLAGS:-}
LDFLAGS=${LDFLAGS:-}
TARGET=${TARGET:-}

# Location of default tools

PKG_CONFIG=${PKG_CONFIG:-pkg-config}
CC=${CC:-${TOOL}gcc}
CXX=${CXX:-${TOOL}g++}

# Predefined values, which should not be easily changed

PACKAGE=$(cat ${SRCDIR}/misc/PACKAGE)
VERSION=$(cat ${SRCDIR}/misc/VERSION)

# Check for a c compiler (mandatory)

echo -n "Checking for a C compiler ... "
if [ ! -x "$(which ${CC})" ]; then
	fail "Error: CC not valid"
else
	export CC
	echo "$(which ${CC})" | tee -a config.log
fi

echo -n "Checking $(basename ${CC}) can produce executables ... "
echo -e '#include <stdlib.h>\nmain() {exit(0);}' | \
	gcc -xc -o /dev/null - 2>&1 && echo "Ok" || { echo "Fail"; exit 1; }

HOST_MACHINE=$(${CC} -dumpmachine)

if [ -n "${TARGET}" ]; then
	echo "Configuring ${PACKAGE} ${VERSION} on ${HOST_MACHINE} for target ${TARGET}"
else
	echo "Configuring ${PACKAGE} ${VERSION} on ${HOST_MACHINE}"
fi

echo "objdir = ${OBJDIR} / srcdir = ${SRCDIR}"

# List of system headers we need to check for

H_FILES="stdlib.h stdio.h string.h getopt.h err.h dirent.h errno.h ctype.h sys/time.h sys/types.h pwd.h grp.h unistd.h sys/utsname.h glob.h sys/stat.h fcntl.h time.h"

# List of system functions to check for function:arg0,arg1

FUNC_CHECK=""

# List of pkg-config things to check for

PKG_CHECK=""

# List of libraries to check for here

LIB_CHECK=""

# Application specific variables

# Check for pkg-config (mandatory)

echo -n "Checking for pkg-config ... "
if [ ! -x "$(which ${PKG_CONFIG})" ]; then
	fail "Error: PKG_CONFIG not valid"
fi

export PKG_CONFIG
echo "$(which ${PKG_CONFIG})"

# Support functions

check_pkg() 
{
	echo -n "Checking for $1 ... "
	$(${PKG_CONFIG} --exists "${1}")
	local RT=$?
	ok ${RT}
	return ${RT}
}

fail()
{
	echo "${1}"
	exit 1
}

check_header()
{
	echo -n "Checking for ${1} ... "
	$(echo "#include <${1}>" | \
		${CC} ${CFLAGS} ${CPPFLAGS} ${LDFLAGS} -E - -o /dev/null 2>>config.log)
	local RT=$?
	ok $?
	return ${RT}
}

check_lib()
{
	local F=/tmp/$$.c

	echo "#define _GNU_SOURCE" >${F}
	echo 'main(){}' >>${F}
	echo -n "Checking for -l${1} ... "
	$(${CC} ${LDFLAGS} ${CPPFLAGS} ${CFLAGS} -l${1} ${F} \
		-o /dev/null 2>>config.log)
	local RT=$?
	ok ${RT}
	rm -f ${F}
	return ${RT}
}

ok()
{
	if [ $1 -eq 0 ]; then echo "ok"; else echo "not found"; fi
}

check_func()
{
	local F=/tmp/$$.c
	local FUNC="$(echo "${1}" | cut -d: -f1)"
	local ARGS="$(echo "${1}" | cut -d: -f2-)"

	echo "#define _GNU_SOURCE" >${F}
	for i in ${H_FILES} ; do
		echo "#include <${i}>" >>${F}
	done
	echo "void main() { ${FUNC}(${ARGS}); }" >>${F}
	echo -n "Checking for ${FUNC}() ... "
	$(${CC} ${LDFLAGS} ${CPPFLAGS} ${CFLAGS} ${F} -o /dev/null 2>>config.log)
	local RT=$?

	ok ${RT}
	rm -f ${F}
	return ${RT}
}

# start a new configuration file
if [ -e ${OBJDIR}/config.h ]; then 
	mv -f ${OBJDIR}/config.h ${OBJDIR}/config.h~; 
fi
rm -f ${OBJDIR}/config.h

# kludge any defines here

# set-up defines
echo "#define VERSION \"${VERSION}\"" >> ${OBJDIR}/config.h

# package checks

for f in ${PKG_CHECK} ; do
	if check_pkg "${f}"; then
		CFLAGS="${CFLAGS} $(${PKG_CONFIG} --cflags "${f}")"
		LDFLAGS="${LDFLAGS} $(${PKG_CONFIG} --libs "${f}")"
	fi
done

# library checks

for f in ${LIB_CHECK} ; do
	if check_lib "${f}"; then LDFLAGS="${LDFLAGS} -l${f}" ; fi
done

# Perform checks for system headers and functions
# This is done here to ensure relevant libraries are linked etc.

for f in ${H_FILES} ; do
	def=$(echo ${f} | sed "s#/#_#;s#\.#_#;s#/#_#;" | tr "[a-z]" "[A-Z]")
    if check_header "${f}"; then 
		echo "#define HAVE_${def} 1" >> ${OBJDIR}/config.h
	fi
done

for f in ${FUNC_CHECK}; do
	def=$(echo ${f} | cut -d: -f1 | tr "[a-z]" "[A-Z]")
	if check_func "${f}"; then 
		echo "#define HAVE_${def} 1" >> ${OBJDIR}/config.h
	fi
done

# Create Makefile from template

echo "Writing Makefile"

ARGS=$(cat <<- __END
    s#@@PREFIX@@#${PREFIX}#;
	s#@@EXECPREFIX@@#${EXECPREFIX}#;
	s#@@SYSCONFDIR@@#${SYSCONFDIR}#;
	s#@@BINDIR@@#${BINDIR}#;
	s#@@SBINDIR@@#${SBINDIR}#;
	s#@@DATADIR@@#${DATADIR}#;
	s#@@DATAROOTDIR@@#${DATAROOTDIR}#;
	s#@@EXECPREFIX@@#${EXECPREFIX}#;
	s#@@LIBEXECDIR@@#${LIBEXECDIR}#;
	s#@@INFODIR@@#${INFODIR}#;
	s#@@LIBDIR@@#${LIBDIR}#;
	s#@@LOCALSTATEDIR@@#${LOCALSTATEDIR}#;
	s#@@SHAREDSTATEDIR@@#${SHAREDSTATEDIR}#;
	s#@@CFLAGS@@#${CFLAGS}#;
	s#@@LDFLAGS@@#${LDFLAGS}#;
	s#@@CC@@#${CC}#;
	s#@@CXX@@#${CXX}#;
	s#@@SRCDIR@@#${SRCDIR}#;
	s#@@OBJDIR@@#${OBJDIR}#;
__END
)

cat ${SRCDIR}/Makefile.in | sed "${ARGS}" > ${OBJDIR}/Makefile

echo "Please type make to continue"

wait
